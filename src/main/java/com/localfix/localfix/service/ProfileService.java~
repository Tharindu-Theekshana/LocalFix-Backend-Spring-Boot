package com.localfix.localfix.service;

import com.localfix.localfix.dto.ProfileDto;
import com.localfix.localfix.dto.ProfileResponse;
import com.localfix.localfix.model.Image;
import com.localfix.localfix.model.Profile;
import com.localfix.localfix.model.User;
import com.localfix.localfix.repository.ImageRepo;
import com.localfix.localfix.repository.ProfileRepo;
import com.localfix.localfix.repository.UserRepo;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.util.ArrayList;
import java.util.List;

@Service
@RequiredArgsConstructor
public class ProfileService {

    @Autowired
    UserRepo userRepo;

    @Autowired
    ProfileRepo profileRepo;

    @Autowired
    TokenBlackList tokenBlackList;

    @Autowired
    ImageRepo imageRepo;

    public ProfileResponse createProfile(String token,MultipartFile profileImage,ProfileDto profileDto, List<MultipartFile> images) {

        if (!tokenBlackList.isTokenBlacklisted(token)) {
            try {
                User worker = userRepo.findById(profileDto.getWorkerId()).orElseThrow(() -> new RuntimeException("Worker not found!"));

                Profile profile = new Profile();
                profile.setName(profileDto.getName());
                profile.setBio(profileDto.getBio());
                profile.setDescription(profileDto.getDescription());
                profile.setLocation(profileDto.getLocation());
                profile.setExperience(profileDto.getExperience());
                profile.setPhoneNumber(profileDto.getPhoneNumber());
                profile.setServiceCategory(profileDto.getServiceCategory());
                profile.setPrice(profileDto.getPrice());
                profile.setWorker(worker);

                if(profileImage != null && !profileImage.isEmpty()){
                    profile.setImage(profileImage.getBytes());
                }

                Profile savedProfile = profileRepo.save(profile);

                List<Image> imageList = new ArrayList<>();
                if (images != null && !images.isEmpty()) {
                    for (MultipartFile file : images) {
                        if (!file.isEmpty()) {
                            Image img = new Image();
                            img.setData(file.getBytes());
                            img.setContentype(file.getContentType());
                            img.setProfile(savedProfile);
                            imageList.add(img);
                        }

                    }
                    imageRepo.saveAll(imageList);
                }
                return new ProfileResponse("Profile Created Successfully!",true);
            } catch (Exception e) {
                return new ProfileResponse("Can't create profile : " + e.getMessage(), false);
            }
        } else {
            return new ProfileResponse("You must login to create profile!", false);
        }

    }

    public ProfileResponse updateProfileStatus(String token, int id, String status) {
        if (!tokenBlackList.isTokenBlacklisted(token)) {
            try {

                Profile profile = profileRepo.findById(id).orElseThrow(() -> new RuntimeException("no profile found!"));

                profile.setStatus(status);
                profileRepo.save(profile);

                return new ProfileResponse("profile status updated successfully!", true);

            } catch (Exception e) {
                return new ProfileResponse("Cant update status : " + e.getMessage(), false);
            }
        }else {
            return new ProfileResponse("You must login to create profile!", false);
        }
    }
}
